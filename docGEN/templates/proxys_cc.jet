<%@ jet package="rpc.generators" imports="com.sun.javadoc.*"  class="proxys_cc" %>

#include "rpc/public/rpc_service_proxy_base.h"
#include "rpc/proxy/rpc_proxy_helper.h"
#include "rpc/base/rpc_param_traits.h"
#include "rpc/base/rpc_thread_state.h"
#include "rpc/master/service_master_proxy.h"
#include "<%=rpc.Helper.getRelativePath(rpc.Context.Get().getCurrentPackage(), rpc.Helper.PathType.eProxyHeader)%>"
#include "<%=rpc.Helper.getRelativePath(rpc.Context.Get().getCurrentPackage(), rpc.Helper.PathType.eInterfaceHeader)%>"
#include "<%=rpc.Helper.getRelativePath(rpc.Context.Get().getCurrentPackage(), rpc.Helper.PathType.eParamsHeader)%>"
namespace RPC
{
<% for(ClassDoc cls: rpc.Context.Get().getCurrentPackage().interfaces()) { %>
    <%
        String cppClassName = rpc.Helper.convertCPPType(cls);
        if(rpc.Helper.isService(cls) || rpc.Helper.isInterface(cls) ) {
    %>
    //Proxy methods for <%=cppClassName%>    
	<%
       for(MethodDoc method: cls.methods()) { 
        %>
        
     void Proxy< <%=cppClassName%> >::<%=method.name()%>(<%
              boolean isFirstMethod = true;
              for(Parameter param: method.parameters()) { 
                  if(isFirstMethod)
                  {
                      isFirstMethod = false;
                  }
                  else
                  {
                      %>, <%
                  }
              %>
              <%=rpc.Helper.parameterDeclare(param)%><% }//End for params %>)
      {
        RPC::Message::Header header;        
        header.message_type = RPC::MethodInfos<<%=cppClassName%>>::<%=method.name()%>_Params::ID;        
        header.source.peer = ProcessState::self()->master_proxy()->localPeerId();
        IPC::Message* msg = new IPC::Message(this->handle().address, RPC::Message::ID, IPC::Message::PRIORITY_NORMAL);
        IPC::ParamTraits<RPC::Message::Header>::Write(msg, header);
        <%
        for(Parameter param: method.parameters()) {
        //if(rpc.Helper.isInterface(rpc.Context.Get().getRoot().classNamed(param.type()))
        %>
        IPC::ParamTraits<<%=rpc.Helper.parameterStorageType(param)%> >::Write(msg, <%
        	if(rpc.Helper.isInterface(param))
        	{
        		%><%=param.name()%>->handle()<%
        	}else
        	{
        		%><%=param.name()%><%
        	}
        %>);
        <% }//End for params %>
        helper_->Send(msg);
       }
        <% }//End Method %>
        <%}//end if(rpc.Helper.isService(cls) || rpc.Helper.isInterface(cls) )%>
<%}%>

    //ServiceProxyFactorys 
<% for(ClassDoc cls: rpc.Context.Get().getCurrentPackage().interfaces()) { %>
    <%
        String cppClassName = rpc.Helper.convertCPPType(cls);
        if(rpc.Helper.isService(cls)) {
    %>
     template<>
     Proxy<<%=cppClassName%>>* ServiceProxyFactory<<%=cppClassName%>>::CreateServiceProxy(const std::string& provider)
     {
         InterfaceHandle handle = ThreadState::self()->masterProxy()->getService(service_type::ServiceName(), provider);
         if(handle.peer == 0 || handle.address == 0)
         {
             return NULL;
         }else
         {
             Proxy<service_type>* proxy =  new Proxy<service_type>(provider, handle);
             proxy->AddRef();
             return proxy;
         }
     }
     	<%}//end if(rpc.Helper.isService(cls))%>
<%}%>
} // End namespace RPC

